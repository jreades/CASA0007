# Explanatory Data Analysis I

A database management system (DBMS) allows users to store, insert, delete, and update information in a database. Spatial databases go a step further because they record data with geographic coordinates.

From Esri Geodatabase to PostGIS, spatial databases have quickly become the primary method of managing spatial data.

To learn more about spatial databases, check out the resources below:

- [Wikipedia: Spatial database](https://en.wikipedia.org/wiki/Spatial_database)
- [7 Spatial Databases for Your Enterprise](https://engage.safe.com/blog/2021/11/7-spatial-databases-enterprise)
- [GISGeography: Spatial Databases – Build Your Spatial Data Empire](https://gisgeography.com/spatial-databases/)
- [Esri: What is a geodatabase?](https://pro.arcgis.com/en/pro-app/latest/help/data/geodatabases/overview/what-is-a-geodatabase-.htm)
- [Introduction to PostGIS](https://postgis.net/workshops/postgis-intro)
- [PostGEESE? Introducing The DuckDB Spatial Extension](https://duckdb.org/2023/04/28/spatial.html)

## DuckDB

[DuckDB](https://duckdb.org) is an in-process SQL OLAP database management system. It is designed to be used as an embedded database in applications, but it can also be used as a standalone SQL database.

* _In-process SQL_ means that DuckDB’s features run in your application, not an external process to which your application connects. In other words: there is no client sending instructions nor a server to read and process them. SQLite works the same way, while PostgreSQL, MySQL…, do not.
* _OLAP_ stands for OnLine Analytical Processing, and Microsoft defines it as a technology that organizes large business databases and supports complex analysis. It can be used to perform complex analytical queries without negatively affecting transactional systems. 

DuckDB is a great option if you’re looking for a serverless data analytics database management system. 

![](https://i.imgur.com/BEDGstx.png)

![](https://i.imgur.com/mFpqp5I.png)


# Introduction to SQL

This week, we will be familiarizing ourselves with DuckDB, learning how to use SQL within a Jupyter notebook, and loading in spatial data. Please work through the following notebook to get started:

1. [Loading Data](https://colab.research.google.com/github/oballinger/CASA0025/blob/main/notebooks/W02_data_import.ipynb)


# OPTIONAL - Downloading PostgreSQL and PostGIS locally for Windows and MacOS

This module will primarily use DuckDB to explore spatial data. However, if you would like to learn more about PostgreSQL and PostGIS, you can follow the instructions below to install them on your local machine.

This workshop uses a [data bundle](https://s3.amazonaws.com/s3.cleverelephant.ca/postgis-workshop-2020.zip). Download it and extract to a convenient location.

To explore the PostgreSQL/PostGIS database, and learn about writing
spatial queries in SQL, we will need some software, either installed
locally or available remotely on the cloud.

-   There are instructions below on how to access PostgreSQL for
    installation on Windows or MacOS. PostgreSQL for Windows and MacOS
    either include PostGIS or have an easy way to add it on.
-   There are instructions below on how to install
    [PgAdmin](https://www.pgadmin.org/). PgAdmin is a graphical database
    explorer and SQL editor which provides a \"user facing\" interface
    to the database engine that does all the world.

For always up-to-date directions on installing PostgreSQL, go to the
[PostgreSQL download page](https://www.postgresql.org/download/) and
select the operating system you are using.

## PostgreSQL for Microsoft Windows

For a Windows install:

1.  Go to the [Windows PostgreSQL download
    page](https://www.enterprisedb.com/downloads/postgres-postgresql-downloads).

2.  Select the latest version of PostgreSQL and save the installer to
    disk.

3.  Run the installer and accept the defaults.

4.  Find and run the \"StackBuilder\" program that was installed with
    the database.

5.  Select the \"Spatial Extensions\" section and choose latest
    \"PostGIS ..Bundle\" option.

    ![image](./screenshots/install_windows_01.png){.inline .inline}

6.  Accept the defaults and install.

## PostgreSQL for Apple MacOS

For a MacOS install:

1.  Go to the [Postgres.app](https://postgresapp.com/) site, and
    download the latest release.

2.  Open the disk image, and drag the **Postgres** icon into the
    **Applications** folder.

    ![image](./screenshots/install_macos_01.png){.inline .inline}

3.  In the **Applications** folder, double-click the **Postgres** icon
    to start the server.

4.  Click the **Initialize** button to create a new blank database
    instance.

    ![image](./screenshots/install_macos_02.png){.inline, .border
    .inline, .border}

5.  In the **Applications** folder, go to the **Utilities** folder and
    open **Terminal**.

6.  Add the command-line utilities to your [PATH]{.title-ref} for
    convenience.

>     sudo mkdir -p /etc/paths.d
>     echo /Applications/Postgres.app/Contents/Versions/latest/bin | sudo tee /etc/paths.d/postgresapp

## PgAdmin for Windows and MacOS

PgAdmin is available for multiple platforms, at
<https://www.pgadmin.org/download/>.

1.  Download and install the latest version for your platform.

2.  Start PgAdmin!

    ![image](./screenshots/install_pgadmin_01.png){.inline .inline}


# Creating a Spatial Database

## PgAdmin

PostgreSQL has a number of administrative front-ends. The primary one is
[psql](http://www.postgresql.org/docs/current/static/app-psql.html), a
command-line tool for entering SQL queries. Another popular PostgreSQL
front-end is the free and open source graphical tool
[pgAdmin](http://www.pgadmin.org/). All queries done in pgAdmin can also
be done on the command line with `psql`. pgAdmin also includes a
geometry viewer you can use to spatial view PostGIS queries.

1.  Find pgAdmin and start it up.

    ![image](./screenshots/pgadmin_01.png){.inline .inline}

2.  If this is the first time you have run pgAdmin, you probably don\'t
    have any servers configured. Right click the `Servers` item in the
    Browser panel.

    We\'ll name our server **PostGIS**. In the Connection tab, enter the
    `Host name/address`. If you\'re working with a local PostgreSQL
    install, you\'ll be able to use `localhost`. If you\'re using a
    cloud service, you should be able to retrieve the host name from
    your account.

    Leave **Port** set at `5432`, and both **Maintenance database** and
    **Username** as `postgres`. The **Password** should be what you
    specified with a local install or with your cloud service.

    ![image](./screenshots/pgadmin_02a.png){.inline .inline}

## Creating a Database

1.  Open the Databases tree item and have a look at the available
    databases. The `postgres` database is the user database for the
    default postgres user and is not too interesting to us.

2.  Right-click on the `Databases` item and select `New Database`.

    ![image](./screenshots/pgadmin_02.png){.inline .inline}

3.  Fill in the `Create Database` form as shown below and click **OK**.

      ----------- ------------
      **Name**    `nyc`
      **Owner**   `postgres`
      ----------- ------------

    ![image](./screenshots/pgadmin_03.png){.inline .inline}

4.  Select the new `nyc` database and open it up to display the tree of
    objects. You\'ll see the `public` schema.

    ![image](./screenshots/pgadmin_04.png)

5.  Click on the SQL query button indicated below (or go to *Tools \>
    Query Tool*).

    ![image](./screenshots/pgadmin_05.png)

6.  Enter the following query into the query text field to load the
    PostGIS spatial extension:

    ``` sql
    CREATE EXTENSION postgis;
    ```

7.  Click the **Play** button in the toolbar (or press **F5**) to
    \"Execute the query.\"

8.  Now confirm that PostGIS is installed by running a PostGIS function:

    ``` sql
    SELECT postgis_full_version();
    ```

You have successfully created a PostGIS spatial database!!

## Function List

[PostGIS_Full_Version](http://postgis.net/docs/PostGIS_Full_Version.html):
Reports full PostGIS version and build configuration info.


# Loading spatial data

Supported by a wide variety of libraries and applications, PostGIS
provides many options for loading data.

We will first load our working data from a database backup file, then
review some standard ways of loading different GIS data formats using
common tools.

## Loading the Backup File

1.  In the PgAdmin browser, **right-click** on the **nyc** database
    icon, and then select the **Restore\...** option.

    ![image](./screenshots/data_loading_1.png){.inline, .border .inline,
    .border}

2.  Browse to the location of your workshop data data directory
    (available in the workshop [data
    bundle](https://s3.amazonaws.com/s3.cleverelephant.ca/postgis-workshop-2020.zip)),
    and select the `nyc_data.backup`{.interpreted-text role="file"}
    file.

    ![image](./screenshots/data_loading_2.png){.inline, .border .inline,
    .border}

3.  Click on the **Restore options** tab, scroll down to the **Do not
    save** section and toggle **Owner** to **Yes**.

    ![image](./screenshots/data_loading_2a.png){.inline, .border
    .inline, .border}

4.  Click the **Restore** button. The database restore should run to
    completion without errors.

    ![image](./screenshots/data_loading_3.png){.inline, .border .inline,
    .border}

5.  After the load is complete, right click the **nyc** database, and
    select the **Refresh** option to update the client information about
    what tables exist in the database.

    ![image](./screenshots/data_loading_4.png){.inline, .border .inline,
    .border}

::: note
::: title
Note
:::

If you want to practice loading data from the native spatial formats,
instead of using the PostgreSQL db backup files just covered, the next
couple of sections will guide you thru loading using various
command-line tools and QGIS DbManager. Note you can skip these sections,
if you have already loaded the data with pgAdmin.
:::

## Shapefiles? What\'s that?

You may be asking yourself \-- \"What\'s this shapefile thing?\" A
\"shapefile\" commonly refers to a collection of files with `.shp`,
`.shx`, `.dbf`, and other extensions on a common prefix name (e.g.,
nyc_census_blocks). The actual shapefile relates specifically to files
with the `.shp` extension. However, the `.shp` file alone is incomplete
for distribution without the required supporting files.

Mandatory files:

-   `.shp`---shape format; the feature geometry itself
-   `.shx`---shape index format; a positional index of the feature
    geometry
-   `.dbf`---attribute format; columnar attributes for each shape, in
    dBase III

Optional files include:

-   `.prj`---projection format; the coordinate system and projection
    information, a plain text file describing the projection using
    well-known text format

The `shp2pgsql`{.interpreted-text role="file"} utility makes shape data
usable in PostGIS by converting it from binary data into a series of SQL
commands that are then run in the database to load the data.

## Loading with shp2pgsql

The `shp2pgsql`{.interpreted-text role="file"} converts Shape files into
SQL. It is a conversion utility that is part of the PostGIS code base
and ships with PostGIS packages. If you installed PostgreSQL locally on
your computer, you may find that `shp2pgsql`{.interpreted-text
role="file"} has been installed along with it, and it is available in
the executable directory of your installation.

Unlike `ogr2ogr`{.interpreted-text role="file"},
`shp2pgsql`{.interpreted-text role="file"} does not connect directly to
the destination database, it just emits the SQL equivalent to the input
shape file. It is up to the user to pass the SQL to the database, either
with a \"pipe\" or by saving the SQL to file and then loading it.

Here is an example invocation, loading the same data as before:

    export PGPASSWORD=mydatabasepassword

    shp2pgsql \
      -D \
      -I \
      -s 26918 \
      nyc_census_blocks_2000.shp \
      nyc_census_blocks_2000 \
      | psql dbname=nyc user=postgres host=localhost

Here is a line-by-line explanation of the command.

    shp2pgsql \

The executable program! It reads the source data file, and emits SQL
which can be directed to a file or piped to `psql`{.interpreted-text
role="file"} to load directly into the database.

    -D \

The **D** flag tells the program to generate \"dump format\" which is
much faster to load than the default \"insert format\".

    -I \

The **I** flag tells the program to create a spatial index on the table
after loading is complete.

    -s 26918 \

The **s** flag tells the program what the \"spatial reference identifier
(SRID)\" of the data is. The source data for this workshop is all in
\"UTM 18\", for which the SRID is **26918** (see below).

    nyc_census_blocks_2000.shp \

The source shape file to read.

    nyc_census_blocks_2000 \

The table name to use when creating the destination table.

    | psql dbname=nyc user=postgres host=localhost

The utility program is generating a stream of SQL. The \"\|\" operator
takes that stream and uses it as input to the `psql`{.interpreted-text
role="file"} database terminal program. The arguments to
`psql`{.interpreted-text role="file"} are just the connection string for
the destination database.

## SRID 26918? What\'s with that?

Most of the import process is self-explanatory, but even experienced GIS
professionals can trip over an **SRID**.

An \"SRID\" stands for \"Spatial Reference IDentifier.\" It defines all
the parameters of our data\'s geographic coordinate system and
projection. An SRID is convenient because it packs all the information
about a map projection (which can be quite complex) into a single
number.

You can see the definition of our workshop map projection by looking it
up either in an online database,

-   <https://epsg.io/26918>

or directly inside PostGIS with a query to the `spatial_ref_sys` table.

``` sql
SELECT srtext FROM spatial_ref_sys WHERE srid = 26918;
```

::: note
::: title
Note
:::

The PostGIS `spatial_ref_sys` table is an `OGC`{.interpreted-text
role="term"}-standard table that defines all the spatial reference
systems known to the database. The data shipped with PostGIS, lists over
3000 known spatial reference systems and details needed to
transform/re-project between them.
:::

In both cases, you see a textual representation of the **26918** spatial
reference system (pretty-printed here for clarity):

    PROJCS["NAD83 / UTM zone 18N",
      GEOGCS["NAD83",
        DATUM["North_American_Datum_1983",
          SPHEROID["GRS 1980",6378137,298.257222101,AUTHORITY["EPSG","7019"]],
          AUTHORITY["EPSG","6269"]],
        PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],
        UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],
        AUTHORITY["EPSG","4269"]],
      UNIT["metre",1,AUTHORITY["EPSG","9001"]],
      PROJECTION["Transverse_Mercator"],
      PARAMETER["latitude_of_origin",0],
      PARAMETER["central_meridian",-75],
      PARAMETER["scale_factor",0.9996],
      PARAMETER["false_easting",500000],
      PARAMETER["false_northing",0],
      AUTHORITY["EPSG","26918"],
      AXIS["Easting",EAST],
      AXIS["Northing",NORTH]]

If you open up the `nyc_neighborhoods.prj` file from the data directory,
you\'ll see the same projection definition.

Data you receive from local agencies---such as New York City---will
usually be in a local projection noted by \"state plane\" or \"UTM\".
Our projection is \"Universal Transverse Mercator (UTM) Zone 18 North\"
or EPSG:26918.

## Things to Try: View data using QGIS

[QGIS](http://qgis.org), is a desktop GIS viewer/editor for quickly
looking at data. You can view a number of data formats including flat
shapefiles and a PostGIS database. Its graphical interface allows for
easy exploration of your data, as well as simple testing and fast
styling.

Try using this software to connect your PostGIS database. The
application can be downloaded from <https://qgis.org>

You\'ll first want to create a connection to a PostGIS database using
menu `Layer->Add Layer->PostGIS Layers->New`{.interpreted-text
role="command"} and then filling in the prompts. Once you have a
connection, you can add Layers by clicking connect and selecting a table
to display.

## Loading data using QGIS DbManager

QGIS comes with a tool called
[DbManager](https://docs.qgis.org/3.28/en/docs/user_manual/plugins/core_plugins/plugins_db_manager.html#dbmanager)
that allows you to connect to various different kinds of databases,
including a PostGIS enabled one. After you have a PostGIS Database
connection configured, go to `Database->DbManager`{.interpreted-text
role="command"} and expand to your database as shown below:

![image](./screenshots/qgis_dbmanager.png){.inline, .border .inline, .border}

From there you can use the `Import Layer/File`{.interpreted-text
role="command"} menu option to load numerous different spatial formats.
In addition to being able to load data from many spatial formats and
export data to many formats, you can also add ad-hoc queries to the
canvas or define views in your database, using the highlighted wrench
icon.


*This section is based on the [PostGIS Intro Workshop](https://postgis.net/workshops/postgis-intro/), sections 3, 4, 5,and 7*